---
- name: Collect Cisco IOS-XE info
  hosts: all
  gather_facts: no
  connection: network_cli
  vars:
    ansible_network_os: ios
    ansible_user: "{{ username }}"
    ansible_password: "{{ password }}"
  tasks:
    - name: Show version
      cisco.ios.ios_command:
        commands: show version
      register: version_result

    # Extraction du modèle en plusieurs étapes robustes
    - name: Try to extract model (Model number)
      set_fact:
        model: "{{ version_result.stdout[0] | regex_search('Model number\\s*:\\s*([A-Za-z0-9\\-]+)', '\\1') | default('') }}"
      when: model is not defined or model == ''

    - name: Try to extract model (cisco <model>-<suffix>)
      set_fact:
        model: "{{ version_result.stdout[0] | regex_search('cisco ([A-Z0-9]+-[A-Z0-9]+)', '\\1') | default('') }}"
      when: model is not defined or model == ''

    - name: Try to extract model (generic pattern)
      set_fact:
        model: "{{ version_result.stdout[0] | regex_search('([A-Z]{2,}[0-9]+-[0-9A-Z]+)', '\\1') | default('') }}"
      when: model is not defined or model == ''

    - name: Set serial and version
      set_fact:
        serial: "{{ version_result.stdout[0] | regex_search('Processor board ID ([A-Z0-9]+)', '\\1') | default('') }}"
        version: "{{ version_result.stdout[0] | regex_search('Version ([^,\\s]+)', '\\1') | default('') }}"

    - name: Write info to file
      local_action:
        module: copy
        content: |
          IP: {{ inventory_hostname }}
          Model: {{ model[0] if model is iterable and not model is string else model }}
          Serial: {{ serial[0] if serial is iterable and not serial is string else serial }}
          Version: {{ version[0] if version is iterable and not version is string else version }}
        dest: "{{ output_file | default('output.txt') }}"
